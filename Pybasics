print("Praise the Lord")

Regression

#!/usr/bin/env python
# coding: utf-8

# # Linear regression :
# ### Regression or best fir, Least Sum of Squares Method
# equation of line, trasparent , y=mx+c or yhat=xb, y=yhat+e, Goodness of fit = rsqaure method or coefficient of determination

# In[61]:


get_ipython().run_line_magic('matplotlib', 'inline')
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize']=(20.0, 10.0)

#reading data
data = pd.read_csv("C:\Ashok\DS\Project_Data\headbrain.csv")


# In[62]:


data.shape, data.head(0)


# In[73]:


#collections x & y
X=data["Head Size(cm^3)"].values
Y=data["Brain Weight(grams)"].values
x=data["Head Size(cm^3)"].values
y=data["Brain Weight(grams)"].values


# In[74]:


#mean X and Y
mean_x=np.mean(X)
mean_y=np.mean(Y)

#total number of values
n=len(X)
n


# In[75]:


from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# cannot use Rank 1 matrix in scikit learn
X=X.reshape((n,1))

#creating model
reg = LinearRegression()
#fitting training data
reg = reg.fit(X,Y)
# Y prediction
Y_predict=reg.predict(X)

#calculaton R2 score

r2_score = reg.score(X,Y)

print(r2_score)


# In[78]:


import statsmodels.api as sm


model = sm.OLS(x,y).fit()
predictions = model.predict(x)

print_model = model.summary()

print(model.summary())


# In[72]:


import pandas as pd


# In[39]:


data = {
    'month' : [1,2,3,4,5],
    'Free_time' : [120,110,100,90,80],
    'num_ve' : [8,8,7,4,5]
}

df = pd.DataFrame(data, columns=['month', 'Free_time', 'num_ve'])
df


# In[43]:


xx=df[['Free_time']]
xx


# In[45]:


xx=sm.add_constant(x)
xx


# # Multivariate regression
# ### data cleaning

# In[1]:


import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib
matplotlib.rcParams["figure.figsize"] = (20,10)


# In[2]:


df1=pd.read_csv("C:\Ashok\DS\Project_Data\Bengaluru_House_Data.csv")


# In[5]:


df1.head(0)


# In[7]:


df1.shape


# In[12]:


df1.groupby("area_type")["area_type"].agg('count')


# In[15]:


df2 = df1.drop(["area_type","availability","balcony","society"],axis="columns")


# In[19]:


df2.head()


# In[21]:


df2.isnull().sum()


# In[25]:


df3=df2.dropna()
df3.isnull().sum()


# In[26]:


df3["size"].unique()


# In[32]:


df3["bhk"]=df3['size'].apply(lambda x: int(x.split(" ")[0]))


# In[34]:


df3['bhk'].unique()


# In[36]:


df3[df3['bhk'] > 20]


# In[37]:


df3["total_sqft"].unique()


# In[58]:


# function to see the valuse the non float columns
def is_float(x):
    try:
        float(x)
    except:
       return False
    return True


# In[59]:


df3[~df3['total_sqft'].apply(is_float)].head()


# In[74]:


# 3 conditions are fullfilled, 1. convert '-' values to float, 2.retain float, 3. ignore rest of junk values
def convert_float(x):
    tokens=x.split('-')
    if len(tokens)==2:
        return (float(x.split('-')[0])+float(x.split('-')[1]))/2
    try:
        return float(x)
    except:
        return None


# In[81]:


df4=df3.copy()
df4['total_sqft']=df3['total_sqft'].apply(convert_float)


# In[82]:


df4.head()


# In[85]:


df4.drop('size',axis='columns').head()


# In[94]:


df4.loc[30]


# In[100]:


df4.iloc[4:5,0:2]


# ## Feature Engineering & dimensionality reduction techniques

# In[101]:


df5=df4.copy()


# In[102]:


df5.head(0)


# In[115]:


import math
df5['cost_per_sqf']=df5['price']*100000/df5['total_sqft']


# In[122]:


len(df5['location'].unique())


# In[124]:


df5.location=df5.location.apply(lambda x: x.strip())


# In[135]:


loca_stat = df5.groupby('location').location.agg('count').sort_values(ascending=False)


# In[136]:


len(loca_stat[loca_stat < 10 ])


# In[139]:


len(loca_stat[loca_stat < 10])


# In[140]:


loca_less = loca_stat[loca_stat < 10]


# In[150]:


len(df5.location.unique()), df5.shape


# In[159]:


df5.location=df5.location.apply(lambda x: 'other' if x in loca_less else x)


# In[190]:


df5.head()


# In[176]:


df5.head(0)


# In[ ]:





# In[ ]:





# In[ ]:







print("Amen")


